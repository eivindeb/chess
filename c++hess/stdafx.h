// stdafx.h : include file for standard system include files,
// or project specific include files that are used frequently, but
// are changed infrequently
//

#pragma once

#include "targetver.h"

#include <stdio.h>
#include <tchar.h>
#include <stdint.h>

#define START_FEN "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"

#define PHASE_MG	1
#define PHASE_EG	2

#define NW		15	
#define NORTH	16
#define NN		32
#define NE		17
#define EAST	1
#define SE		-15
#define SOUTH	-16
#define SS		-32
#define SW		-17
#define WEST	-1

#define MFLAGS_CPT				1
#define MFLAGS_ENP				2
#define MFLAGS_PAWN_DOUBLE		4
#define MFLAGS_CASTLE_LONG		8
#define MFLAGS_CASTLE_SHORT		16
#define MFLAGS_PAWN_MOVE		32
#define MFLAGS_KING_MOVE		64
#define MFLAGS_PROMOTION		128
#define MFLAGS_PROMOTION_QUEEN	256
#define MFLAGS_PROMOTION_ROOK	512
#define MFLAGS_PROMOTION_BISHOP	1024
#define MFLAGS_PROMOTION_KNIGHT	2048
#define MFLAGS_NULL				4096

#define CASTLE_BOTH		3
#define CASTLE_SHORT	1
#define CASTLE_LONG		2

#define ON_BOARD(SQ)		(SQ & 0x88) == 0
#define SQ_FILE(SQ)			(char((SQ % 8) + 97))
#define SQ_RANK(SQ)			(SQ >> 4) + 1
#define SQ_STR_TO_INT(str)	int(str[0] - 97) + ((str[1] - '0')-1)*16

#define MATE_SCORE		300000
#define INVALID			2147483647
#define ENTRY_LIFE		10
#define NO_ID			255



enum Piece : uint8_t { KING, PAWN, KNIGHT, BISHOP, ROOK, QUEEN, EMPTY };
enum Color : int8_t { WHITE = 1, BLACK = -1, NONE = 0 };

enum Task { TASK_NOTHING, TASK_SEARCH, TASK_PONDER};
enum Mode { PROTO_NOTHING, PROTO_XBOARD, PROTO_UCI };
enum TT_FLAG : uint8_t {
	TT_INVALID = 0, TT_EXACT, TT_ALPHA, TT_BETA
};


static int8_t pieceDeltas[6][8] = {
	{ NW, NORTH, NE, EAST, SE, SOUTH, SW, WEST }, // king
	{ NW, NORTH, NE, NN, SE, SOUTH, SW, SS },		// pawn
	{ 31, 33, 18, -14, -31, -33, -18, 14 },		// knight
	{ NW, SW, NE, SE, 0, 0, 0, 0 },				// bishop
	{ NORTH, EAST, SOUTH, WEST, 0, 0, 0, 0 },		// rook
	{ NW, NORTH, NE, EAST, SE, SOUTH, SW, WEST }	// queen
};

// courtesy of mediocre chess
//maps a piece to attack groups

static int attackGroups[6] = {13, 12, 32, 28, 3, 31};

/*
int ATTACK_NONE = 0;
int ATTACK_KQR = 1;
int ATTACK_QR = 2;
int ATTACK_KQBwP = 4;
int ATTACK_KQBbP = 8;
int ATTACK_QB = 16;
int ATTACK_N = 32;
*/

static int attackArray[257] =
{ 0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,2,0,0,0,		//0-19
0,0,0,16,0,0,16,0,0,0,0,0,2,0,0,0,0,0,16,0,		//20-39
0,0,0,16,0,0,0,0,2,0,0,0,0,16,0,0,0,0,0,0,		//40-59
16,0,0,0,2,0,0,0,16,0,0,0,0,0,0,0,0,16,0,0,     //60-79
2,0,0,16,0,0,0,0,0,0,0,0,0,0,16,32,2,32,16,0,   //80-99
0,0,0,0,0,0,0,0,0,0,32,8,1,8,32,0,0,0,0,0,		//100-119
0,2,2,2,2,2,2,1,0,1,2,2,2,2,2,2,0,0,0,0,		//120-139
0,0,32,4,1,4,32,0,0,0,0,0,0,0,0,0,0,0,16,32,    //140-159
2,32,16,0,0,0,0,0,0,0,0,0,0,16,0,0,2,0,0,16,    //160-179
0,0,0,0,0,0,0,0,16,0,0,0,2,0,0,0,16,0,0,0,		//180-199
0,0,0,16,0,0,0,0,2,0,0,0,0,16,0,0,0,0,16,0,     //200-219
0,0,0,0,2,0,0,0,0,0,16,0,0,16,0,0,0,0,0,0,		//220-239
2,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0 };			//240-256

static int dirBySquareDiff[239] = {
	NE,0,0,0,0,0,0,NORTH,0,0,0,0,0,0,NW,0,0,NE,0,0,						//0-19
	0,0,0,NORTH,0,0,0,0,0,NW,0,0,0,0,NE,0,0,0,0,NORTH,					//20-39
	0,0,0,0,NW,0,0,0,0,0,0,NE,0,0,0,NORTH,0,0,0,NW,						//40-59
	0,0,0,0,0,0,0,0,NE,0,0,NORTH,0,0,NW,0,0,0,0,0,						//60-79
	0,0,0,0,0,NE,0,NORTH,0,NW,0,0,0,0,0,0,0,0,0,0,						//80-99
	0,0,NE,NORTH,NW,0,0,0,0,0,0,0,EAST,EAST,EAST,EAST,EAST,EAST,EAST,0,	//100-119
	WEST,WEST,WEST,WEST,WEST,WEST,WEST,0,0,0,0,0,0,0,SE,SOUTH,SW,0,0,0,	//120-139
	0,0,0,0,0,0,0,0,0,SE,0,SOUTH,0,SW,0,0,0,0,0,0,						//140-159
	0,0,0,0,SE,0,0,SOUTH,0,0,SW,0,0,0,0,0,0,0,0,SE,						//160-179
	0,0,0,SOUTH,0,0,0,SW,0,0,0,0,0,0,SE,0,0,0,0,SOUTH,					//180-199
	0,0,0,0,SW,0,0,0,0,SE,0,0,0,0,0,SOUTH,0,0,0,0,						//200-219
	0,SW,0,0,SE,0,0,0,0,0,0,SOUTH,0,0,0,0,0,0,SW };						//220-238

static int pieceValues[6] = { 10000, 100, 310, 320, 500, 900 };
static int pieceSorting[7] = { 6, 1, 2, 3, 4, 5, 0 };
static int mobilityWeight = 10;

static int PSTwPawnMG[120] = {
	-15, -5, 0, 5, 5, 0, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,	//0-15
	-15, -5, 0, 5, 5, 0, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,	//16-31
	-15, -5, 0, 15, 15, 0, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,	//32-47
	-15, -5, 0, 25, 25, 0, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,	//48-63
	-15, -5, 0, 15, 15, 0, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,	//64-79
	-15, -5, 0, 5, 5, 0, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,	//80-95
	-15, -5, 0, 5, 5, 0, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,	//96-111
	-15, -5, 0, 5, 5, 0, -5, -15							//112-119
};

static int PSTbPawnMG[120] = {
	-15, -5, 0, 5, 5, 0, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,	//0-15
	-15, -5, 0, 5, 5, 0, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,	//16-31
	-15, -5, 0, 5, 5, 0, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,	//32-47
	-15, -5, 0, 15, 15, 0, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,	//48-63
	-15, -5, 0, 25, 25, 0, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,	//64-79
	-15, -5, 0, 15, 15, 0, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,	//80-95
	-15, -5, 0, 5, 5, 0, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,	//96-111
	-15, -5, 0, 5, 5, 0, -5, -15							//112-119
};

static int PSTwPawnEG[120] = {
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//0-15
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//16-31
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//32-47
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//48-63
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//64-79
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//80-95
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//96-111
	0, 0, 0, 0, 0, 0, 0, 0								//112-119
};

static int PSTbPawnEG[120] = {
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//0-15
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//16-31
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//32-47
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//48-63
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//64-79
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//80-95
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//96-111
	0, 0, 0, 0, 0, 0, 0, 0								//112-119
};

static int PSTwKnightMG[120] = {
	-50, -40, -30, -25, -25, -30, -40, -50, 0, 0, 0, 0, 0, 0, 0, 0,		//0-15
	-35, -25, -15, -10, -10, -15, -25, -35, 0, 0, 0, 0, 0, 0, 0, 0,		//16-31
	-20, -10, 0, 5, 5, 0, -10, -20, 0, 0, 0, 0, 0, 0, 0, 0,				//32-47
	-10, 0, 10, 15, 15, 10, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0,				//48-63
	-5, 5, 15, 20, 20, 15, 5, -5, 0, 0, 0, 0, 0, 0, 0, 0,				//64-79
	-5, 5, 15, 20, 20, 15, 5, -5, 0, 0, 0, 0, 0, 0, 0, 0,				//80-95
	-20, -10, 0, 5, 5, 0, -10, -20, 0, 0, 0, 0, 0, 0, 0, 0,				//96-111
	-135, -25, -15, -10, -10, -15, -25, -135							//112-119
};

static int PSTbKnightMG[120] = {
	-135, -25, -15, -10, -10, -15, -25, -135, 0, 0, 0, 0, 0, 0, 0, 0,	//0-15
	-20, -10, 0, 5, 5, 0, -10, -20, 0, 0, 0, 0, 0, 0, 0, 0,				//16-31
	-5, 5, 15, 20, 20, 15, 5, -5, 0, 0, 0, 0, 0, 0, 0, 0,				//32-47
	-5, 5, 15, 20, 20, 15, 5, -5, 0, 0, 0, 0, 0, 0, 0, 0,				//48-63
	-10, 0, 10, 15, 15, 10, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0,				//64-79
	-20, -10, 0, 5, 5, 0, -10, -20, 0, 0, 0, 0, 0, 0, 0, 0,				//80-95
	-35, -25, -15, -10, -10, -15, -25, -35, 0, 0, 0, 0, 0, 0, 0, 0,		//96-111
	-50, -40, -30, -25, -25, -30, -40, -50								//112-119
};

static int PSTwKnightEG[120] = {
	-40, -30, -20, -15, -15, -20, -30, -40, 0, 0, 0, 0, 0, 0, 0, 0,		//0-15
	-30, -20, -10, -5, -5, -10, -20, -30, 0, 0, 0, 0, 0, 0, 0, 0,		//16-31
	-20, -10, 0, 5, 5, 0, -10, -20, 0, 0, 0, 0, 0, 0, 0, 0,				//32-47
	-15, -5, 5, 10, 10, 5, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,				//48-63
	-15, -5, 5, 10, 10, 5, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,				//64-79
	-20, -10, 0, 5, 5, 0, -10, -20, 0, 0, 0, 0, 0, 0, 0, 0,				//80-95
	-30, -20, -10, -5, -5, -10, -20, -30, 0, 0, 0, 0, 0, 0, 0, 0,		//96-111
	-40, -30, -20, -15, -15, -20, -30, -40								//112-119
};

static int PSTbKnightEG[120] = {
	-40, -30, -20, -15, -15, -20, -30, -40, 0, 0, 0, 0, 0, 0, 0, 0,		//0-15
	-30, -20, -10, -5, -5, -10, -20, -30, 0, 0, 0, 0, 0, 0, 0, 0,		//16-31
	-20, -10, 0, 5, 5, 0, -10, -20, 0, 0, 0, 0, 0, 0, 0, 0,				//32-47
	-15, -5, 5, 10, 10, 5, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,				//48-63
	-15, -5, 5, 10, 10, 5, -5, -15, 0, 0, 0, 0, 0, 0, 0, 0,				//64-79
	-20, -10, 0, 5, 5, 0, -10, -20, 0, 0, 0, 0, 0, 0, 0, 0,				//80-95
	-30, -20, -10, -5, -5, -10, -20, -30, 0, 0, 0, 0, 0, 0, 0, 0,		//96-111
	-40, -30, -20, -15, -15, -20, -30, -40								//112-119
};

static int PSTwBishopMG[120] = {
	-18, -18, -16, -14, -14, -16, -18, -18, 0, 0, 0, 0, 0, 0, 0, 0,		//0-15
	-8, 0, -2, 0, 0, -2, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0,					//16-31
	-6, -2, 4, 2, 2, 4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0,					//32-47
	-4, 0, 2, 8, 8, 2, 0, -4, 0, 0, 0, 0, 0, 0, 0, 0,					//48-63
	-4, 0, 2, 8, 8, 2, 0, -4, 0, 0, 0, 0, 0, 0, 0, 0,					//64-79
	-6, -2, 4, 2, 2, 4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0,					//80-95
	-8, 0, -2, 0, 0, -2, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0,					//96-111
	-8, -8, -6, -4, -4, -6, -8, -8										//112-119
};

static int PSTbBishopMG[120] = {
	-8, -8, -6, -4, -4, -6, -8, -8, 0, 0, 0, 0, 0, 0, 0, 0,		//0-15
	-8, 0, -2, 0, 0, -2, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0,					//16-31
	-6, -2, 4, 2, 2, 4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0,					//32-47
	-4, 0, 2, 8, 8, 2, 0, -4, 0, 0, 0, 0, 0, 0, 0, 0,					//48-63
	-4, 0, 2, 8, 8, 2, 0, -4, 0, 0, 0, 0, 0, 0, 0, 0,					//64-79
	-6, -2, 4, 2, 2, 4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0,					//80-95
	-8, 0, -2, 0, 0, -2, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0,					//96-111
	-18, -18, -16, -14, -14, -16, -18, -18										//112-119
};

static int PSTwBishopEG[120] = {
	-18, -12, -9, -6, -6, -9, -12, -18, 0, 0, 0, 0, 0, 0, 0, 0,		//0-15
	-12, -6, -3, 0, 0, -3, -6, -12, 0, 0, 0, 0, 0, 0, 0, 0,			//16-31
	-9, -3, 0, 3, 3, 0, -3, -9, 0, 0, 0, 0, 0, 0, 0, 0,				//32-47
	-6, 0, 3, 6, 6, 3, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0,				//48-63
	-6, 0, 3, 6, 6, 3, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0,				//64-79
	-9, -3, 0, 3, 3, 0, -3, -9, 0, 0, 0, 0, 0, 0, 0, 0,				//80-95
	-12, -6, -3, 0, 0, -3, -6, -12, 0, 0, 0, 0, 0, 0, 0, 0,			//96-111
	-18, -12, -9, -6, -6, -9, -12, -18								//112-119
};

static int PSTbBishopEG[120] = {
	-18, -12, -9, -6, -6, -9, -12, -18, 0, 0, 0, 0, 0, 0, 0, 0,		//0-15
	-12, -6, -3, 0, 0, -3, -6, -12, 0, 0, 0, 0, 0, 0, 0, 0,			//16-31
	-9, -3, 0, 3, 3, 0, -3, -9, 0, 0, 0, 0, 0, 0, 0, 0,				//32-47
	-6, 0, 3, 6, 6, 3, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0,				//48-63
	-6, 0, 3, 6, 6, 3, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0,				//64-79
	-9, -3, 0, 3, 3, 0, -3, -9, 0, 0, 0, 0, 0, 0, 0, 0,				//80-95
	-12, -6, -3, 0, 0, -3, -6, -12, 0, 0, 0, 0, 0, 0, 0, 0,			//96-111
	-18, -12, -9, -6, -6, -9, -12, -18								//112-119
};

static int PSTwRookMG[120] = {
	-6, -3, 0, 3, 3, 0, -3, -6, 0, 0, 0, 0, 0, 0, 0, 0,		//0-15
	-6, -3, 0, 3, 3, 0, -3, -6, 0, 0, 0, 0, 0, 0, 0, 0,		//16-31
	-6, -3, 0, 3, 3, 0, -3, -6, 0, 0, 0, 0, 0, 0, 0, 0,		//32-47
	-6, -3, 0, 3, 3, 0, -3, -6, 0, 0, 0, 0, 0, 0, 0, 0,		//48-63
	-6, -3, 0, 3, 3, 0, -3, -6, 0, 0, 0, 0, 0, 0, 0, 0,		//64-79
	-6, -3, 0, 3, 3, 0, -3, -6, 0, 0, 0, 0, 0, 0, 0, 0,		//80-95
	-6, -3, 0, 3, 3, 0, -3, -6, 0, 0, 0, 0, 0, 0, 0, 0,		//96-111
	-6, -3, 0, 3, 3, 0, -3, -6,								//112-119
};

static int PSTbRookMG[120] = {
	-6, -3, 0, 3, 3, 0, -3, -6, 0, 0, 0, 0, 0, 0, 0, 0,		//0-15
	-6, -3, 0, 3, 3, 0, -3, -6, 0, 0, 0, 0, 0, 0, 0, 0,		//16-31
	-6, -3, 0, 3, 3, 0, -3, -6, 0, 0, 0, 0, 0, 0, 0, 0,		//32-47
	-6, -3, 0, 3, 3, 0, -3, -6, 0, 0, 0, 0, 0, 0, 0, 0,		//48-63
	-6, -3, 0, 3, 3, 0, -3, -6, 0, 0, 0, 0, 0, 0, 0, 0,		//64-79
	-6, -3, 0, 3, 3, 0, -3, -6, 0, 0, 0, 0, 0, 0, 0, 0,		//80-95
	-6, -3, 0, 3, 3, 0, -3, -6, 0, 0, 0, 0, 0, 0, 0, 0,		//96-111
	-6, -3, 0, 3, 3, 0, -3, -6,								//112-119
};

static int PSTwRookEG[120] = {
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//0-15
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//16-31
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//32-47
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//48-63
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//64-79
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//80-95
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//96-111
	0, 0, 0, 0, 0, 0, 0, 0								//112-119
};

static int PSTbRookEG[120] = {
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//0-15
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//16-31
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//32-47
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//48-63
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//64-79
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//80-95
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//96-111
	0, 0, 0, 0, 0, 0, 0, 0								//112-119
};

static int PSTwQueenMG[120] = {
	-5, -5, -5, -5, -5, -5, -5, -5, 0, 0, 0, 0, 0, 0, 0, 0,		//0-15
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//16-31
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//32-47
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//48-63
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//64-79
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//80-95
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//96-111
	0, 0, 0, 0, 0, 0, 0, 0								//112-119
};

static int PSTbQueenMG[120] = {
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//0-15
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//16-31
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//32-47
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//48-63
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//64-79
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//80-95
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//96-111
	-5, -5, -5, -5, -5, -5, -5, -5						//112-119
};

static int PSTwQueenEG[120] = {
	-24, -16, -12, -8, -8, -12, -16, -24, 0, 0, 0, 0, 0, 0, 0, 0,	//0-15
	-16, -8, -4, 0, 0, -4, -8, -16, 0, 0, 0, 0, 0, 0, 0, 0,			//16-31
	-12, -4, 0, 4, 4, 0, -4, -12, 0, 0, 0, 0, 0, 0, 0, 0,			//32-47
	-8, 0, 4, 8, 8, 4, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0,				//48-63
	-8, 0, 4, 8, 8, 4, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0,				//64-79
	-12, -4, 0, 4, 4, 0, -4, -12, 0, 0, 0, 0, 0, 0, 0, 0,			//80-95
	-16, -8, -4, 0, 0, -4, -8, -16, 0, 0, 0, 0, 0, 0, 0, 0,			//96-111
	-24, -16, -12, -8, -8, -12, -16, -24							//112-119
};

static int PSTbQueenEG[120] = {
	-24, -16, -12, -8, -8, -12, -16, -24, 0, 0, 0, 0, 0, 0, 0, 0,	//0-15
	-16, -8, -4, 0, 0, -4, -8, -16, 0, 0, 0, 0, 0, 0, 0, 0,			//16-31
	-12, -4, 0, 4, 4, 0, -4, -12, 0, 0, 0, 0, 0, 0, 0, 0,			//32-47
	-8, 0, 4, 8, 8, 4, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0,				//48-63
	-8, 0, 4, 8, 8, 4, 0, -8, 0, 0, 0, 0, 0, 0, 0, 0,				//64-79
	-12, -4, 0, 4, 4, 0, -4, -12, 0, 0, 0, 0, 0, 0, 0, 0,			//80-95
	-16, -8, -4, 0, 0, -4, -8, -16, 0, 0, 0, 0, 0, 0, 0, 0,			//96-111
	-24, -16, -12, -8, -8, -12, -16, -24							//112-119
};

static int PSTwKingMG[120] = {
	40, 50, 30, 10, 10, 30, 50, 40, 0, 0, 0, 0, 0, 0, 0, 0,			//0-15
	30, 40, 20, 0, 0, 20, 40, 30, 0, 0, 0, 0, 0, 0, 0, 0,			//16-31
	10, 20, 0, -20, -20, 0, 20, -10, 0, 0, 0, 0, 0, 0, 0, 0,		//32-47
	0, 10, -10, -30, -30, -10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0,		//48-63
	-10, 0, -20, -40, -40, -20, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0,		//64-79
	-20, -10, -30, -50, -50, -30, -10, -20, 0, 0, 0, 0, 0, 0, 0, 0,	//80-95
	-30, -20, -40, -60, -60, -40, -20, -30, 0, 0, 0, 0, 0, 0, 0, 0,	//96-111
	-40, -30, -50, -70, -70, -50, -30, -40							//112-119
};

static int PSTbKingMG[120] = {
	-40, -30, -50, -70, -70, -50, -30, -40, 0, 0, 0, 0, 0, 0, 0, 0, //0-15
	-30, -20, -40, -60, -60, -40, -20, -30, 0, 0, 0, 0, 0, 0, 0, 0,	//16-31
	-20, -10, -30, -50, -50, -30, -10, -20, 0, 0, 0, 0, 0, 0, 0, 0,	//32-47
	-10, 0, -20, -40, -40, -20, 0, -10, 0, 0, 0, 0, 0, 0, 0, 0, 0,	//48-63
	0, 10, -10, -30, -30, -10, 10, 0, 0, 0, 0, 0, 0, 0, 0,			//64-79
	10, 20, 0, -20, -20, 0, 20, -10, 0, 0, 0, 0, 0, 0, 0, 0,		//80-95
	30, 40, 20, 0, 0, 20, 40, 30, 0, 0, 0, 0, 0, 0, 0, 0,			//96-111
	40, 50, 30, 10, 10, 30, 50, 40									//112-119
};

static int PSTwKingEG[120] = {
	-72, -48, -36, -24, -24, -36, -48, -72, 0, 0, 0, 0, 0, 0, 0, 0, //0-15
	-48, -24, -12, 0, 0, -12, -24, -48, 0, 0, 0, 0, 0, 0, 0, 0,		//16-31
	-36, -12, 0, 12, 12, 0, -12, -36, 0, 0, 0, 0, 0, 0, 0, 0,		//32-47
	-24, 0, 12, 24, 24, 12, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0,			//48-63
	-24, 0, 12, 24, 24, 12, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0,			//64-79
	-36, -12, 0, 12, 12, 0, -12, -36, 0, 0, 0, 0, 0, 0, 0, 0,		//80-95
	-48, -24, -12, 0, 0, -12, -24, -48, 0, 0, 0, 0, 0, 0, 0, 0,		//96-111
	-72, -48, -36, -24, -24, -36, -48, -72							//112-119
};

static int PSTbKingEG[120] = {
	-72, -48, -36, -24, -24, -36, -48, -72, 0, 0, 0, 0, 0, 0, 0, 0, //0-15
	-48, -24, -12, 0, 0, -12, -24, -48, 0, 0, 0, 0, 0, 0, 0, 0,		//16-31
	-36, -12, 0, 12, 12, 0, -12, -36, 0, 0, 0, 0, 0, 0, 0, 0,		//32-47
	-24, 0, 12, 24, 24, 12, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0,			//48-63
	-24, 0, 12, 24, 24, 12, 0, -24, 0, 0, 0, 0, 0, 0, 0, 0,			//64-79
	-36, -12, 0, 12, 12, 0, -12, -36, 0, 0, 0, 0, 0, 0, 0, 0,		//80-95
	-48, -24, -12, 0, 0, -12, -24, -48, 0, 0, 0, 0, 0, 0, 0, 0,		//96-111
	-72, -48, -36, -24, -24, -36, -48, -72							//112-119
};


struct Move {
	uint8_t fromSq;
	uint8_t toSq;
	Piece movedPiece;
	Piece attackedPiece;
	uint16_t flags;
	uint8_t id;
};

struct State {
	int move;
	int wCastleRights;
	int bCastleRights;
	int enPassant;
	int halfMoveClk;
};

struct Zobrist {
	unsigned long long pieces[6][2][120];
	unsigned long long side;
	unsigned long long wCastlingRights[4]; // 0 (NONE), CASTLE_SHORT, CASTLE_LONG, , CASTLE_BOTH
	unsigned long long bCastlingRights[4];
	unsigned long long enPassant[8];
};

struct TranspositionEntry {
	unsigned long long zobristKey;
	int bestMove;
	int score;
	uint8_t depth;
	uint8_t age;
	TT_FLAG flag;
};

#define MOVE_FROM_SQ_MASK			0x7f
#define MOVE_TO_SQ_MASK				0x3f80
#define MOVE_MOVED_PIECE_MASK		0x1c000
#define MOVE_ATTACKED_PIECE_MASK	0xe0000
#define MOVE_CAPTURE_MASK			0x100000
#define MOVE_EN_PASSANT_MASK		0x200000
#define MOVE_PROMOTION_MASK			0x400000
#define MOVE_PROMOTED_TO_MASK		0x3800000
#define MOVE_CASTLE_LONG_MASK		0x4000000
#define MOVE_CASTLE_SHORT_MASK		0x8000000

#define MOVE_FROM_SQ_SHIFT			0
#define MOVE_TO_SQ_SHIFT			7
#define MOVE_MOVED_PIECE_SHIFT		14
#define MOVE_ATTACKED_PIECE_SHIFT	17
#define MOVE_CAPTURE_SHIFT			20
#define MOVE_EN_PASSANT_SHIFT		21
#define MOVE_PROMOTION_SHIFT		22
#define MOVE_PROMOTED_TO_SHIFT		23
#define MOVE_CASTLE_LONG_SHIFT		26
#define MOVE_CASTLE_SHORT_SHIFT		27

#define MOVE_CASTLE_SHORT		0b10
#define MOVE_CASTLE_LONG		0b01


/* move is on the form:
	initial square	(0-6 bit) 
	target square	(7-13 bit)
	movedpiece		(14-16 bit)
	attacked		(17-19 bit)
	capture			(20 bit)
	en passant		(21 bit)
	promotion		(22 bit)
	promoted to		(23-24 bit)
	castle long		(25 bit)
	castle short	(26 bit)
	id				(27-31 bit) // TODO, have now changed promoted to, to just 2 bits, so have to change that in all calls and checks. Also have to add id to move add.
									(thinking a counter for reset each square in move gen)

*/

// TODO: reference additional headers your program requires here
